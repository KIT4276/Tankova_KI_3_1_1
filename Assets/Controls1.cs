//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Controls1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls1 : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls1"",
    ""maps"": [
        {
            ""name"": ""Camera1ActionMap"",
            ""id"": ""1d6b73f9-cb14-4af3-8448-a61ee8268cca"",
            ""actions"": [
                {
                    ""name"": ""Moving"",
                    ""type"": ""Value"",
                    ""id"": ""12250556-c007-4404-af5a-d3bb19fdabe2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""7f563622-8273-4799-a54f-f0c2cd1cea8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7ab70f92-3917-4f02-b552-3c88cbed63a8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""67b72761-15f1-493b-b0be-4ae508b28887"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3d7991a0-f909-487a-a493-53bde25a3b3f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""13a8b7c4-40ac-4f75-9159-a5d212c86996"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eb6d7b0c-108e-49f0-954a-1f01acca5bf4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""457c2131-802f-41f4-a17e-b892cbc02047"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera2ActionMap"",
            ""id"": ""f909de08-d00d-4212-a99d-a584b9419340"",
            ""actions"": [
                {
                    ""name"": ""Moving"",
                    ""type"": ""Value"",
                    ""id"": ""a8052bfd-fa48-4e28-86e4-ec6e13c82c85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""a4d78d9a-b563-4d43-8ad2-eb2d1cde9b9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LRUD"",
                    ""id"": ""fbf928f6-2743-49c9-a45f-497e23ec1233"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""add7d2b2-3eed-4788-b85d-b830c9818167"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1a50e8ce-d844-41eb-9452-a81a5ac78a2c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7dfc1ae7-a7e6-4021-9161-d72527ce8c0c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5669fe51-93f3-474f-8a9f-1cd936bfbf07"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c6fe3626-88b2-44e5-bd35-aba02bcb4eca"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera1ActionMap
        m_Camera1ActionMap = asset.FindActionMap("Camera1ActionMap", throwIfNotFound: true);
        m_Camera1ActionMap_Moving = m_Camera1ActionMap.FindAction("Moving", throwIfNotFound: true);
        m_Camera1ActionMap_Throw = m_Camera1ActionMap.FindAction("Throw", throwIfNotFound: true);
        // Camera2ActionMap
        m_Camera2ActionMap = asset.FindActionMap("Camera2ActionMap", throwIfNotFound: true);
        m_Camera2ActionMap_Moving = m_Camera2ActionMap.FindAction("Moving", throwIfNotFound: true);
        m_Camera2ActionMap_Throw = m_Camera2ActionMap.FindAction("Throw", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera1ActionMap
    private readonly InputActionMap m_Camera1ActionMap;
    private ICamera1ActionMapActions m_Camera1ActionMapActionsCallbackInterface;
    private readonly InputAction m_Camera1ActionMap_Moving;
    private readonly InputAction m_Camera1ActionMap_Throw;
    public struct Camera1ActionMapActions
    {
        private @Controls1 m_Wrapper;
        public Camera1ActionMapActions(@Controls1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moving => m_Wrapper.m_Camera1ActionMap_Moving;
        public InputAction @Throw => m_Wrapper.m_Camera1ActionMap_Throw;
        public InputActionMap Get() { return m_Wrapper.m_Camera1ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Camera1ActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ICamera1ActionMapActions instance)
        {
            if (m_Wrapper.m_Camera1ActionMapActionsCallbackInterface != null)
            {
                @Moving.started -= m_Wrapper.m_Camera1ActionMapActionsCallbackInterface.OnMoving;
                @Moving.performed -= m_Wrapper.m_Camera1ActionMapActionsCallbackInterface.OnMoving;
                @Moving.canceled -= m_Wrapper.m_Camera1ActionMapActionsCallbackInterface.OnMoving;
                @Throw.started -= m_Wrapper.m_Camera1ActionMapActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_Camera1ActionMapActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_Camera1ActionMapActionsCallbackInterface.OnThrow;
            }
            m_Wrapper.m_Camera1ActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moving.started += instance.OnMoving;
                @Moving.performed += instance.OnMoving;
                @Moving.canceled += instance.OnMoving;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }
        }
    }
    public Camera1ActionMapActions @Camera1ActionMap => new Camera1ActionMapActions(this);

    // Camera2ActionMap
    private readonly InputActionMap m_Camera2ActionMap;
    private ICamera2ActionMapActions m_Camera2ActionMapActionsCallbackInterface;
    private readonly InputAction m_Camera2ActionMap_Moving;
    private readonly InputAction m_Camera2ActionMap_Throw;
    public struct Camera2ActionMapActions
    {
        private @Controls1 m_Wrapper;
        public Camera2ActionMapActions(@Controls1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moving => m_Wrapper.m_Camera2ActionMap_Moving;
        public InputAction @Throw => m_Wrapper.m_Camera2ActionMap_Throw;
        public InputActionMap Get() { return m_Wrapper.m_Camera2ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Camera2ActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ICamera2ActionMapActions instance)
        {
            if (m_Wrapper.m_Camera2ActionMapActionsCallbackInterface != null)
            {
                @Moving.started -= m_Wrapper.m_Camera2ActionMapActionsCallbackInterface.OnMoving;
                @Moving.performed -= m_Wrapper.m_Camera2ActionMapActionsCallbackInterface.OnMoving;
                @Moving.canceled -= m_Wrapper.m_Camera2ActionMapActionsCallbackInterface.OnMoving;
                @Throw.started -= m_Wrapper.m_Camera2ActionMapActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_Camera2ActionMapActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_Camera2ActionMapActionsCallbackInterface.OnThrow;
            }
            m_Wrapper.m_Camera2ActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moving.started += instance.OnMoving;
                @Moving.performed += instance.OnMoving;
                @Moving.canceled += instance.OnMoving;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }
        }
    }
    public Camera2ActionMapActions @Camera2ActionMap => new Camera2ActionMapActions(this);
    public interface ICamera1ActionMapActions
    {
        void OnMoving(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
    }
    public interface ICamera2ActionMapActions
    {
        void OnMoving(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
    }
}
